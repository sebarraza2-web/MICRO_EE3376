	.thumb
    .text
    .align 2

P4IN .field 0x40004C21,32 ; Port 4 Input
P4OUT .field 0x40004C23,32 ; Port 4 Output
P4DIR .field 0x40004C25,32 ; Port 4 Directions
P4REN .field 0x40004C27,32 ; Port 4 Resistor Enable

P5OUT .field 0x40004C42,32 ; Port 5 Output
P5DIR .field 0x40004C44,32 ; Port 5 Direction

DIET .equ 0x01 ; MACROS for outputs
COKE .equ 0x02
PEPSI .equ 0x04
SPRITE .equ 0x10
JARRITOS .equ 0x20
POWERADE .equ 0x40
ERROR .equ 0x80

swDIET .equ 0x7E ; MACROS for inputs
swCOKE .equ 0x7D
swPEPSI .equ 0x7B
swSPRITE .equ 0x77
swJARRITOS .equ 0x6F
swPOWERADE .equ 0x5F
swMD .equ 0x3F
NOinput .equ 0x7F

    .global main

main:
    BL Port4_Init ; initialize P4 & P5
    BL Port5_Init

loop
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swDIET ; 0x3E = DIET Msk
    BEQ swDIETpressed

    CMP R0, #swCOKE ; 0x3D = COKE Msk
    BEQ swCOKEpressed

    CMP R0, #swPEPSI ; 0x3B = PEPSI Msk
    BEQ swPEPSIpressed

    CMP R0, #swSPRITE ; 0x37 = SPRITE Msk
    BEQ swSPRITEpressed

    CMP R0, #swJARRITOS ; 0x2F = JARRITOS Msk
    BEQ swJARRITOSpressed

    CMP R0, #swPOWERADE ; 0x1F = POWERADE Msk
    BEQ swPOWERADEpressed

    CMP R0, #swMD ; 0x1F = POWERADE Msk
    BEQ swMDpressed

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE error	  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loop

Random:
	MOV R1, #0x660D
	MUL R6, R6, R1
	MOV R1, #0xF3F5
	ADD R6, R1

	MOV R1, #18

	UDIV R2, R6, R1
	MUL R3, R2, R1
	SUB R3, R6, R3

	ADD R6, R3, #1
MD_loop:
	MOV R7, #1
	BL output_display
mdloop
	BL LED_toggle
	CMP R7, R3
	BEQ check
	MOV R5, #0
	BL delay
	ADD R7, R7, #1
	BL output_display
	MOV R0, #0
	BL error
	B mdloop

check
	CMP R3, #1
	BEQ loopDIET
	CMP R3, #7
	BEQ loopDIET
	CMP R3, #13
	BEQ loopDIET
	CMP R3, #2
	BEQ loopCOKE
	CMP R3, #8
	BEQ loopCOKE
	CMP R3, #14
	BEQ loopCOKE
	CMP R3, #3
	BEQ loopPEPSI
	CMP R3, #9
	BEQ loopPEPSI
	CMP R3, #15
	BEQ loopPEPSI
	CMP R3, #4
	BEQ loopSPRITE
	CMP R3, #10
	BEQ loopSPRITE
	CMP R3, #16
	BEQ loopSPRITE
	CMP R3, #5
	BEQ loopJARRITOS
	CMP R3, #11
	BEQ loopJARRITOS
	CMP R3, #17
	BEQ loopJARRITOS
	CMP R3, #6
	BEQ loopPOWERADE
	CMP R3, #12
	BEQ loopPOWERADE
	CMP R3, #18
	BEQ loopPOWERADE

loopDIET
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swDIET ; 0x3E = DIET Msk
    BEQ swDIETpressed

	MOV R0, #DIET
    BL Port5_Output

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE errorDIET	  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loopDIET
loopCOKE
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swCOKE ; 0x3E = DIET Msk
    BEQ swCOKEpressed

	MOV R0, #COKE
    BL Port5_Output

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE errorCOKE  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loopCOKE
loopPEPSI
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swPEPSI ; 0x3E = DIET Msk
    BEQ swPEPSIpressed

	MOV R0, #PEPSI
    BL Port5_Output

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE errorPEPSI	  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loopPEPSI
loopSPRITE
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swSPRITE; 0x3E = DIET Msk
    BEQ swSPRITEpressed

	MOV R0, #SPRITE
    BL Port5_Output

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE errorSPRITE	  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loopSPRITE
loopJARRITOS
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swJARRITOS ; 0x3E = DIET Msk
    BEQ swJARRITOSpressed

	MOV R0, #JARRITOS
    BL Port5_Output

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE errorJARRITOS	  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loopJARRITOS
loopPOWERADE
    BL Port4_Input ; read states from switches in P4

    CMP R0, #swPOWERADE ; 0x3E = DIET Msk
    BEQ swPOWERADEpressed

	MOV R0, #POWERADE
    BL Port5_Output

    CMP R0, #NOinput ; 0x3F -> NO SWITCHES PRESSED
    BNE errorPOWERADE	  ; else error signal
    MOV R0, #0

    BL Port5_Output
    B loopPOWERADE

swDIETpressed
    MOV R0, #DIET ; output-> DIET
    BL Port5_Output
    B loop
swCOKEpressed
    MOV R0, #COKE ; output-> COKE
    BL Port5_Output
    B loop
swPEPSIpressed
    MOV R0, #PEPSI ; output-> PEPSI
    BL Port5_Output
    B loop
swSPRITEpressed
    MOV R0, #SPRITE ; output-> SPRITE
    BL Port5_Output
    B loop
swJARRITOSpressed
    MOV R0, #JARRITOS ; output-> JARRITOS
    BL Port5_Output
    B loop
swPOWERADEpressed
    MOV R0, #POWERADE ; output-> POWERADE
    BL Port5_Output
    B loop
swMDpressed
	ADD R6, #0xDD
	BL Random
	BL MD_loop
	B loop
error
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loop
errorDIET
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loopDIET
errorCOKE
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loopCOKE
errorPEPSI
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loopPEPSI
errorSPRITE
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loopSPRITE
errorJARRITOS
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loopJARRITOS
errorPOWERADE
    MOV R0, #ERROR ; error will output
    BL Port5_Output
    B loopPOWERADE

output_display:
	cmp R7, #1
	MOV R6, #0xFD
	BEQ show_diet
	cmp R7, #2
	MOV R6, #0x37
	BEQ show_coke
	cmp R7, #3
	MOV R6, #0x78
	BEQ show_pepsi
	cmp R7, #4
	MOV R6, #0x98
	BEQ show_sprite
	cmp R7, #5
	MOV R6, #0x11
	BEQ show_jarritos
	cmp R7, #6
	MOV R6, #0x36
	BEQ show_powerade
	cmp R7, #7
	MOV R6, #0xFC
	BEQ show_diet
	cmp R7, #8
	MOV R6, #0xAB
	BEQ show_coke
	cmp R7, #9
	MOV R6, #0x34
	BEQ show_pepsi
	cmp R7, #10
	MOV R6, #0xDD
	BEQ show_sprite
	cmp R7, #11
	MOV R6, #0xFF
	BEQ show_jarritos
	cmp R7, #12
	MOV R6, #0xBF
	BEQ show_powerade
	cmp R7, #13
	MOV R6, #0x01
	BEQ show_diet
	cmp R7, #14
	MOV R6, #0x23
	BEQ show_coke
	cmp R7, #15
	MOV R6, #0x09
	BEQ show_pepsi
	cmp R7, #16
	MOV R6, #0x82
	BEQ show_sprite
	cmp R7, #17
	MOV R6, #0x69
	BEQ show_jarritos
	cmp R7, #18
	MOV R6, #0x10
	BEQ show_powerade
	BX LR
show_diet
	MOV R0, #DIET ; output-> DIET
    BL Port5_Output
    MOV R5, #0
    BL delay
    B mdloop
show_coke
	MOV R0, #COKE ; output-> DIET
	MOV R5, #0
    BL delay
    BL Port5_Output
    MOV R5, #0
    BL delay
    B mdloop
show_pepsi
	MOV R0, #PEPSI; output-> DIET
	MOV R5, #0
    BL delay
    BL Port5_Output
    MOV R5, #0
    BL delay
    B mdloop
show_sprite
	MOV R0, #SPRITE; output-> DIET
	MOV R5, #0
    BL delay
    BL Port5_Output
    MOV R5, #0
    BL delay
    B mdloop
show_jarritos
	MOV R0, #JARRITOS ; output-> DIET
	MOV R5, #0
    BL delay
    BL Port5_Output
    MOV R5, #0
    BL delay
    B mdloop
show_powerade
	MOV R0, #POWERADE ; output-> DIET
	MOV R5, #0
    BL delay
    BL Port5_Output
    MOV R5, #0
    BL delay
    B mdloop
Port4_Init:
    LDR R1, P4REN ; enable internal resitors
    MOV R0, #0x7F
    STRB R0, [R1]

    LDR R1, P4OUT ; configure active low-logic
    MOV R0, #0x7F
    STRB R0, [R1]
    BX LR

Port4_Input:
    LDR R1, P4IN ; reading the input from switches
    LDRB R0, [R1]
    AND R0, R0, #0x7F
    BX LR
delay:
	MOV R8, #0xFFFF
delayloop
	CMP R5, R8
	BHS leave
	ADD R5, #1
	B delayloop
leave
	BX LR

Port5_Init:
    LDR R1, P5DIR ; declare outputs
    MOV R0, #0xF7
    STRB R0, [R1]
    BX LR

LED_toggle:
     LDR R1, P5OUT ; setting outputs
     EOR R0, #ERROR
     STRB R0, [R1]
     BX LR

Port5_Output:
     LDR R1, P5OUT ; setting outputs
     STRB R0, [R1]
     BX LR
     .end
